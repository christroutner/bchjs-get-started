"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var primatives_1 = require("./primatives");
var __1 = require("..");
var CashWizardTokenDocument = /** @class */ (function () {
    function CashWizardTokenDocument(_a) {
        var _b = _a === void 0 ? {} : _a, schema = _b.schema, address = _b.address, templateId = _b.templateId, userDefinedVariables = _b.userDefinedVariables, lockingScriptInputs = _b.lockingScriptInputs, password = _b.password;
        if (schema === undefined || schema === null)
            this.schema = 0x00;
        else
            this.schema = schema;
        this.version = this.schema;
        if (this.schema > 0x00)
            throw Error("Schema 0x00 is currently the only option");
        this.address = address;
        if (password) {
            this.version += 0x10;
            this.hasPassword = true;
        }
        if (!address)
            this.version += 0x40;
        if (address && __1.Utils.isSlpAddress(address))
            this.version += 0x20;
        if (address && !__1.Utils.isMainnet(address))
            this.version += 0x80;
        this.password = password ? password : undefined;
        this.hash160 = address ? Buffer.from(__1.Utils.getHash160Buffer(address)) : undefined;
        this.templateId = templateId ? templateId : undefined;
        this.x = userDefinedVariables ? userDefinedVariables : undefined;
        this.l = lockingScriptInputs ? lockingScriptInputs : undefined;
    }
    CashWizardTokenDocument.prototype.toBuffer = function () {
        var sink = new primatives_1.Primatives.ArraySink();
        this.serializeInto(sink);
        return Buffer.from(sink.rawBytes);
    };
    CashWizardTokenDocument.prototype.toHex = function () {
        var buf = this.toBuffer();
        return buf.toString('hex');
    };
    CashWizardTokenDocument.prototype.serializeInto = function (stream) {
        stream.writeInt(this.version, 1);
        stream.writeBytes(this.hash160.toJSON().data);
        stream.writeBytes(this.templateId.toJSON().data);
        stream.writeVarInt(this.x.length);
        this.x.forEach(function (x) {
            stream.writeVarInt(x.length);
            stream.writeBytes(x.toJSON().data);
        });
        stream.writeVarInt(this.l.length);
        this.l.forEach(function (l) {
            stream.writeVarInt(l.length);
            stream.writeBytes(l.toJSON().data);
        });
    };
    CashWizardTokenDocument.parse = function (buffer) {
        var source = new primatives_1.Primatives.ArraySource(buffer.toJSON().data);
        var stream = new primatives_1.Primatives.ByteStream(source);
        var version = stream.readByte();
        var doc = new CashWizardTokenDocument({ schema: version & 0x0f });
        doc.version = version;
        doc.hasPassword = doc.version & 0x10 ? true : false;
        var network = doc.version & 0x80 ? 'testnet' : 'mainnet';
        var isAddressTokenIdDependant = doc.version & 0x40;
        if (!isAddressTokenIdDependant) {
            doc.hash160 = Buffer.from(stream.readBytes(20));
            var addr = __1.Utils.slpAddressFromHash160(doc.hash160, network, 'p2sh');
            doc.address = doc.version & 0x20 ? addr : __1.Utils.toCashAddress(addr);
        }
        doc.templateId = Buffer.from(stream.readBytes(32));
        var x_length = stream.readVarInt();
        doc.x = [];
        for (var i = 0; i < x_length; i++) {
            var len = stream.readVarInt();
            doc.x.push(Buffer.from(stream.readBytes(len)));
        }
        var l_length = stream.readVarInt();
        doc.l = [];
        for (var i = 0; i < l_length; i++) {
            var len = stream.readVarInt();
            doc.l.push(Buffer.from(stream.readBytes(len)));
        }
        return doc;
    };
    return CashWizardTokenDocument;
}());
exports.CashWizardTokenDocument = CashWizardTokenDocument;
//# sourceMappingURL=cashwizard.js.map